syntax = "proto3";
package internal;
option go_package="github.com/sheikhshack/distributed-chaos-50.041/node/gossip";

enum Command {
  FIND_SUCCESSOR = 0;
  JOIN = 1;
  HEALTHCHECK = 2;
  GET_PREDECESSOR = 3;
  NOTIFY = 4;
  LOOKUP= 5;
  GET_SUCCESSOR_LIST = 6;
}


enum DlowenStatus {
  SAME_NODE = 0;
  REDIRECTED_NODE = 1;
}

message Request {
  message Body {
    int64 HashSlot = 1;
    string InfoHash = 2;
  }

  Command command = 1;
  string requesterID = 2;
  string targetID = 3;
  Body body = 4;
}

message Response {
  message Body {
    string ID = 1;
    repeated string SuccessorList = 2;
    bool IsHealthy = 4;
  }

  Command command = 1;
  string requesterID = 2;
  string targetID = 3;
  Body body = 4;
}
// In this proof of concept, we have the key and value sent from client -> chord node
message ModRequest {
  string key = 1;
  string value = 2;
  string fileType = 3;
}

message DLUploadRequest {
  string filename = 1;
  string containerIP = 2;
}

message DLDownloadRequest {
  string filename = 1;
}

message DLDeleteRequest {
  string filename = 1;
}


message DLResponse {
  string chordIP = 1;
  DlowenStatus status = 2;
}

message DLDownloadResponse {
  ContainerInfo container = 1;
  string chordIP = 2;
}

message DLDeleteResponse {
  string chordIP =1;
  DlowenStatus status = 2;
}

message ContainerInfo {
  string containerIP = 1;

}

message FetchChordRequest {
  string key = 1;
  string fileType = 2;
}

message ModResponse {
  string IP = 1;
}

message DebugMessage {
  string fromID = 1;
  string predecessor = 2;
  repeated string successorList = 3;
  repeated string fingers = 4;
}

message DebugResponse {
  bool success = 1;
}

message MigrationRequest{
  string requesterID = 1;
}

message MigrationResponse{
  bool success = 1;
}


service InternalListener {
  // core service
  rpc Emit(Request) returns (Response) {}
  // chord file management services (internal)
  rpc ReadFile(FetchChordRequest) returns (ContainerInfo) {}
  rpc WriteFile(ModRequest) returns (ModResponse) {}
  rpc WriteFileAndReplicate(ModRequest) returns (ModResponse) {}
  rpc DeleteFile(FetchChordRequest) returns (ModResponse) {}
  rpc DeleteFileAndReplicate(FetchChordRequest) returns (ModResponse) {}
  rpc FetchChordIp(FetchChordRequest) returns (ModResponse) {}
  rpc MigrationJoin(MigrationRequest) returns (MigrationResponse) {}
  rpc MigrationFault(MigrationRequest) returns (MigrationResponse) {}
  // defunct

  // D3L bridge protocol (external)
  rpc StoreKeyHash(DLUploadRequest) returns (DLResponse) {}
  rpc GetFileLocation(DLDownloadRequest) returns (DLDownloadResponse) {}
  rpc DeleteClientFile(DLDeleteRequest) returns (DLDeleteResponse) {}

  rpc Debug(DebugMessage) returns (DebugResponse) {}
}