syntax = "proto3";
package internal;
option go_package="github.com/sheikhshack/distributed-chaos-50.041/node/gossip";

enum Command {
  FIND_SUCCESSOR = 0;
  JOIN = 1;
  HEALTHCHECK = 2;
  GET_PREDECESSOR = 3;
  NOTIFY = 4;
  LOOKUP= 5 ;
}

message Request {
  message Body {
    int64 HashSlot = 1;
    string InfoHash = 2;
  }

  Command command = 1;
  string requesterID = 2;
  string targetID = 3;
  Body body = 4;
}

message Response {
  message Body {
    string ID = 1;
    bool IsHealthy = 4;
  }

  Command command = 1;
  string requesterID = 2;
  string targetID = 3;
  Body body = 4;
}
// In this proof of concept, we have the key and value sent from client -> chord node
message UploadRequest {
  string key = 1;
  string value = 2;
}

// can merge
message DownloadRequest {
  string key = 1;
}

message CheckRequest {
  string key = 1;
}

message UploadResponse {
  string IP = 1;
}

message CheckResponse {
  string IP = 1;
}

message DownloadResponse {
  string value = 1;
}

message DebugMessage {
  string fromID = 1;
  string predecessor = 2;
  string successor = 3;
  repeated string fingers = 4;
}

message DebugResponse {
  bool success = 1;
}

service InternalListener {
  rpc Emit(Request) returns (Response) {}
  rpc Upload(UploadRequest) returns (UploadResponse) {}
  rpc Download(DownloadRequest) returns (DownloadResponse) {}
  rpc CheckIP(CheckRequest) returns (CheckResponse) {}
  rpc Debug(DebugMessage) returns (DebugResponse) {}
}