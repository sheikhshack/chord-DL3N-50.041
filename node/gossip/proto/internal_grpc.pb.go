// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package gossip

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InternalListenerClient is the client API for InternalListener service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InternalListenerClient interface {
	// core service
	Emit(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// chord file management services (internal)
	WriteFile(ctx context.Context, in *ModRequest, opts ...grpc.CallOption) (*ModResponse, error)
	DeleteFile(ctx context.Context, in *FetchChordRequest, opts ...grpc.CallOption) (*ModResponse, error)
	FetchChordIp(ctx context.Context, in *FetchChordRequest, opts ...grpc.CallOption) (*ModResponse, error)
	// defunct
	Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (*DownloadResponse, error)
	// dlowen communicaton protocol (external)
	StoreKeyHash(ctx context.Context, in *DLUploadRequest, opts ...grpc.CallOption) (*DLResponse, error)
	//  rpc CheckIP(CheckRequest) returns (CheckResponse) {}
	//  rpc WriteIP(UploadRequest) returns (UploadRequest) {}
	Debug(ctx context.Context, in *DebugMessage, opts ...grpc.CallOption) (*DebugResponse, error)
}

type internalListenerClient struct {
	cc grpc.ClientConnInterface
}

func NewInternalListenerClient(cc grpc.ClientConnInterface) InternalListenerClient {
	return &internalListenerClient{cc}
}

func (c *internalListenerClient) Emit(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/internal.InternalListener/Emit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalListenerClient) WriteFile(ctx context.Context, in *ModRequest, opts ...grpc.CallOption) (*ModResponse, error) {
	out := new(ModResponse)
	err := c.cc.Invoke(ctx, "/internal.InternalListener/WriteFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalListenerClient) DeleteFile(ctx context.Context, in *FetchChordRequest, opts ...grpc.CallOption) (*ModResponse, error) {
	out := new(ModResponse)
	err := c.cc.Invoke(ctx, "/internal.InternalListener/DeleteFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalListenerClient) FetchChordIp(ctx context.Context, in *FetchChordRequest, opts ...grpc.CallOption) (*ModResponse, error) {
	out := new(ModResponse)
	err := c.cc.Invoke(ctx, "/internal.InternalListener/FetchChordIp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalListenerClient) Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (*DownloadResponse, error) {
	out := new(DownloadResponse)
	err := c.cc.Invoke(ctx, "/internal.InternalListener/Download", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalListenerClient) StoreKeyHash(ctx context.Context, in *DLUploadRequest, opts ...grpc.CallOption) (*DLResponse, error) {
	out := new(DLResponse)
	err := c.cc.Invoke(ctx, "/internal.InternalListener/StoreKeyHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalListenerClient) Debug(ctx context.Context, in *DebugMessage, opts ...grpc.CallOption) (*DebugResponse, error) {
	out := new(DebugResponse)
	err := c.cc.Invoke(ctx, "/internal.InternalListener/Debug", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InternalListenerServer is the server API for InternalListener service.
// All implementations must embed UnimplementedInternalListenerServer
// for forward compatibility
type InternalListenerServer interface {
	// core service
	Emit(context.Context, *Request) (*Response, error)
	// chord file management services (internal)
	WriteFile(context.Context, *ModRequest) (*ModResponse, error)
	DeleteFile(context.Context, *FetchChordRequest) (*ModResponse, error)
	FetchChordIp(context.Context, *FetchChordRequest) (*ModResponse, error)
	// defunct
	Download(context.Context, *DownloadRequest) (*DownloadResponse, error)
	// dlowen communicaton protocol (external)
	StoreKeyHash(context.Context, *DLUploadRequest) (*DLResponse, error)
	//  rpc CheckIP(CheckRequest) returns (CheckResponse) {}
	//  rpc WriteIP(UploadRequest) returns (UploadRequest) {}
	Debug(context.Context, *DebugMessage) (*DebugResponse, error)
	mustEmbedUnimplementedInternalListenerServer()
}

// UnimplementedInternalListenerServer must be embedded to have forward compatible implementations.
type UnimplementedInternalListenerServer struct {
}

func (UnimplementedInternalListenerServer) Emit(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Emit not implemented")
}
func (UnimplementedInternalListenerServer) WriteFile(context.Context, *ModRequest) (*ModResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteFile not implemented")
}
func (UnimplementedInternalListenerServer) DeleteFile(context.Context, *FetchChordRequest) (*ModResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedInternalListenerServer) FetchChordIp(context.Context, *FetchChordRequest) (*ModResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchChordIp not implemented")
}
func (UnimplementedInternalListenerServer) Download(context.Context, *DownloadRequest) (*DownloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedInternalListenerServer) StoreKeyHash(context.Context, *DLUploadRequest) (*DLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreKeyHash not implemented")
}
func (UnimplementedInternalListenerServer) Debug(context.Context, *DebugMessage) (*DebugResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Debug not implemented")
}
func (UnimplementedInternalListenerServer) mustEmbedUnimplementedInternalListenerServer() {}

// UnsafeInternalListenerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InternalListenerServer will
// result in compilation errors.
type UnsafeInternalListenerServer interface {
	mustEmbedUnimplementedInternalListenerServer()
}

func RegisterInternalListenerServer(s grpc.ServiceRegistrar, srv InternalListenerServer) {
	s.RegisterService(&InternalListener_ServiceDesc, srv)
}

func _InternalListener_Emit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalListenerServer).Emit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.InternalListener/Emit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalListenerServer).Emit(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalListener_WriteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalListenerServer).WriteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.InternalListener/WriteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalListenerServer).WriteFile(ctx, req.(*ModRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalListener_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchChordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalListenerServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.InternalListener/DeleteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalListenerServer).DeleteFile(ctx, req.(*FetchChordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalListener_FetchChordIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchChordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalListenerServer).FetchChordIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.InternalListener/FetchChordIp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalListenerServer).FetchChordIp(ctx, req.(*FetchChordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalListener_Download_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalListenerServer).Download(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.InternalListener/Download",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalListenerServer).Download(ctx, req.(*DownloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalListener_StoreKeyHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DLUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalListenerServer).StoreKeyHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.InternalListener/StoreKeyHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalListenerServer).StoreKeyHash(ctx, req.(*DLUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalListener_Debug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DebugMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalListenerServer).Debug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.InternalListener/Debug",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalListenerServer).Debug(ctx, req.(*DebugMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// InternalListener_ServiceDesc is the grpc.ServiceDesc for InternalListener service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InternalListener_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "internal.InternalListener",
	HandlerType: (*InternalListenerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Emit",
			Handler:    _InternalListener_Emit_Handler,
		},
		{
			MethodName: "WriteFile",
			Handler:    _InternalListener_WriteFile_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _InternalListener_DeleteFile_Handler,
		},
		{
			MethodName: "FetchChordIp",
			Handler:    _InternalListener_FetchChordIp_Handler,
		},
		{
			MethodName: "Download",
			Handler:    _InternalListener_Download_Handler,
		},
		{
			MethodName: "StoreKeyHash",
			Handler:    _InternalListener_StoreKeyHash_Handler,
		},
		{
			MethodName: "Debug",
			Handler:    _InternalListener_Debug_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/internal.proto",
}
