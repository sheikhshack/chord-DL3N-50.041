// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package gossip

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExternalListenerClient is the client API for ExternalListener service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExternalListenerClient interface {
	FileRequest(ctx context.Context, in *NewFileRequest, opts ...grpc.CallOption) (*Response, error)
	CheckFile(ctx context.Context, in *CheckFileRequest, opts ...grpc.CallOption) (*Response, error)
}

type externalListenerClient struct {
	cc grpc.ClientConnInterface
}

func NewExternalListenerClient(cc grpc.ClientConnInterface) ExternalListenerClient {
	return &externalListenerClient{cc}
}

func (c *externalListenerClient) FileRequest(ctx context.Context, in *NewFileRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/grpc.ExternalListener/FileRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalListenerClient) CheckFile(ctx context.Context, in *CheckFileRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/grpc.ExternalListener/CheckFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExternalListenerServer is the server API for ExternalListener service.
// All implementations must embed UnimplementedExternalListenerServer
// for forward compatibility
type ExternalListenerServer interface {
	FileRequest(context.Context, *NewFileRequest) (*Response, error)
	CheckFile(context.Context, *CheckFileRequest) (*Response, error)
	mustEmbedUnimplementedExternalListenerServer()
}

// UnimplementedExternalListenerServer must be embedded to have forward compatible implementations.
type UnimplementedExternalListenerServer struct {
}

func (UnimplementedExternalListenerServer) FileRequest(context.Context, *NewFileRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileRequest not implemented")
}
func (UnimplementedExternalListenerServer) CheckFile(context.Context, *CheckFileRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckFile not implemented")
}
func (UnimplementedExternalListenerServer) mustEmbedUnimplementedExternalListenerServer() {}

// UnsafeExternalListenerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExternalListenerServer will
// result in compilation errors.
type UnsafeExternalListenerServer interface {
	mustEmbedUnimplementedExternalListenerServer()
}

func RegisterExternalListenerServer(s grpc.ServiceRegistrar, srv ExternalListenerServer) {
	s.RegisterService(&ExternalListener_ServiceDesc, srv)
}

func _ExternalListener_FileRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalListenerServer).FileRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ExternalListener/FileRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalListenerServer).FileRequest(ctx, req.(*NewFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalListener_CheckFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalListenerServer).CheckFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ExternalListener/CheckFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalListenerServer).CheckFile(ctx, req.(*CheckFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExternalListener_ServiceDesc is the grpc.ServiceDesc for ExternalListener service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExternalListener_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.ExternalListener",
	HandlerType: (*ExternalListenerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FileRequest",
			Handler:    _ExternalListener_FileRequest_Handler,
		},
		{
			MethodName: "CheckFile",
			Handler:    _ExternalListener_CheckFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/external.proto",
}
