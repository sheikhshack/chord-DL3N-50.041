// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DL3NClient is the client API for DL3N service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DL3NClient interface {
	GetAvailableChunks(ctx context.Context, in *DL3NHash, opts ...grpc.CallOption) (*Chunks, error)
	GetChunk(ctx context.Context, in *ChunkMeta, opts ...grpc.CallOption) (*ChunkData, error)
}

type dL3NClient struct {
	cc grpc.ClientConnInterface
}

func NewDL3NClient(cc grpc.ClientConnInterface) DL3NClient {
	return &dL3NClient{cc}
}

func (c *dL3NClient) GetAvailableChunks(ctx context.Context, in *DL3NHash, opts ...grpc.CallOption) (*Chunks, error) {
	out := new(Chunks)
	err := c.cc.Invoke(ctx, "/dl3n_pb.DL3N/GetAvailableChunks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dL3NClient) GetChunk(ctx context.Context, in *ChunkMeta, opts ...grpc.CallOption) (*ChunkData, error) {
	out := new(ChunkData)
	err := c.cc.Invoke(ctx, "/dl3n_pb.DL3N/GetChunk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DL3NServer is the server API for DL3N service.
// All implementations must embed UnimplementedDL3NServer
// for forward compatibility
type DL3NServer interface {
	GetAvailableChunks(context.Context, *DL3NHash) (*Chunks, error)
	GetChunk(context.Context, *ChunkMeta) (*ChunkData, error)
	mustEmbedUnimplementedDL3NServer()
}

// UnimplementedDL3NServer must be embedded to have forward compatible implementations.
type UnimplementedDL3NServer struct {
}

func (UnimplementedDL3NServer) GetAvailableChunks(context.Context, *DL3NHash) (*Chunks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableChunks not implemented")
}
func (UnimplementedDL3NServer) GetChunk(context.Context, *ChunkMeta) (*ChunkData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChunk not implemented")
}
func (UnimplementedDL3NServer) mustEmbedUnimplementedDL3NServer() {}

// UnsafeDL3NServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DL3NServer will
// result in compilation errors.
type UnsafeDL3NServer interface {
	mustEmbedUnimplementedDL3NServer()
}

func RegisterDL3NServer(s grpc.ServiceRegistrar, srv DL3NServer) {
	s.RegisterService(&DL3N_ServiceDesc, srv)
}

func _DL3N_GetAvailableChunks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DL3NHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DL3NServer).GetAvailableChunks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dl3n_pb.DL3N/GetAvailableChunks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DL3NServer).GetAvailableChunks(ctx, req.(*DL3NHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _DL3N_GetChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChunkMeta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DL3NServer).GetChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dl3n_pb.DL3N/GetChunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DL3NServer).GetChunk(ctx, req.(*ChunkMeta))
	}
	return interceptor(ctx, in, info, handler)
}

// DL3N_ServiceDesc is the grpc.ServiceDesc for DL3N service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DL3N_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dl3n_pb.DL3N",
	HandlerType: (*DL3NServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAvailableChunks",
			Handler:    _DL3N_GetAvailableChunks_Handler,
		},
		{
			MethodName: "GetChunk",
			Handler:    _DL3N_GetChunk_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dl3n.proto",
}
